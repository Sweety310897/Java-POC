package com.shivani.bank.services;

import java.util.List;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import com.shivani.bank.exceptions.AccountDetailsException;
import com.shivani.bank.exceptions.BalanceException;
import com.shivani.bank.interfaces.InputReader;
import com.shivani.bank.models.Bank;
import com.shivani.bank.services.BankOperations.Choices;
import com.shivani.bank.validations.InputValidations;

public class PropertyFileReader implements InputReader{
	
	private final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
	Bank shivaniBank = new Bank();
	static int accountNumber = 1000;
	InputValidations validate = new InputValidations();
	BankOperations bankop = new BankOperations();
	LogManager lgmngr = LogManager.getLogManager();
	Logger log = lgmngr.getLogger(Logger.GLOBAL_LOGGER_NAME);
	
	/*
	 * to read inputs from the file
	 */
	public void addAccount(String values) {
		
		try {
			values =  values.replace("\"", "");	
			String[] accDetails = values.split(",");   
			for(String each: accDetails) {
		
				String[] custDetails = each.split(" ");
				int accNumber = Integer.parseInt(custDetails[0]);
				String custName = custDetails[1];
	            validate.checkName(custName);
				int bankAccType = Integer.parseInt(custDetails[2]);
				validate.checkAccType(bankAccType);
				String aadarNumber = custDetails[3];
				String custMobileNo = custDetails[4];
				validate.checkPhoneNum(custMobileNo);
				String custEmail = custDetails[5];
				validate.checkEmail(custEmail);
				bankop.add(accNumber, custName, bankAccType, custMobileNo, custEmail, aadarNumber);

			}
		}
		catch (AccountDetailsException message) {
			logger.log(Level.INFO, message.getMessage()); 
        }		
	}

	/*
	 * display all accounts
	 */
	public void displayAll() {
		
		bankop.display();
		
	}
	
	/*
	 *  searching account
	 */
	public void searchByAccount(String searchAccount) {
		
		searchAccount =  searchAccount.replace("\"", "");	
		String[] search = searchAccount.split(",");
		for(String each: search) {
			int searchAccountNumber = Integer.parseInt(each);
			bankop.search(searchAccountNumber);
		}
		
	}
	
	/*
	 * deposit amount
	 */
	public void depositAmount(String details) {
		try {
			details =  details.replace("\"", "");
			String[] depositDetails = details.split(",");
			for(String each: depositDetails) {
				String[] values = each.split(" ");
				int depositAccountNumber = Integer.parseInt(values[0]);
				long amount = Long.parseLong(values[1]);
	
				bankop.deposit(depositAccountNumber,amount);
	
			}

		 } catch(AccountDetailsException | BalanceException message ) {
				logger.log(Level.INFO, message.getMessage());
		 }
	}
	
	/*
	 * withdraw amount
	 */
	public void withDrawAmount(String details) {

		try {				
			details =  details.replace("\"", "");
			String[] withdrawDetails = details.split(",");
			for(String each: withdrawDetails) {
				String[] values = each.split(" ");
				int withdrawAccountNumber = Integer.parseInt(values[0]);
				long amount = Long.parseLong(values[1]);
				bankop.withDraw(withdrawAccountNumber,amount);
				
			}
		} catch(AccountDetailsException | BalanceException message ) {
			logger.log(Level.INFO, message.getMessage());
		}
	}

	/*
	 * overriding read input
	 * @see com.shivani.bank.interfaces.InputReader#readInput()
	 */
	@SuppressWarnings("rawtypes")
	public void readInput() {
		FileInputStream fis;
		try { 
		Choices choice;
	  	fis = new FileInputStream("resources/input.properties");
		Properties prop = new Properties();
		prop.load(fis);
		List<String> keys = new ArrayList<>(prop.stringPropertyNames());
		Collections.sort(keys);
		
		for(String key: keys) {
			choice = Choices.valueOf(key);
		    switch(choice) {
		      	case ADDACCOUNT : 		addAccount(prop.getProperty(key));
		      							break;
		      							
		      	case DISPLAYALL: 		displayAll();
		      							break;
		      							
		      	case SEARCHBYACCOUNT : 	searchByAccount(prop.getProperty(key));
		      							break;
		      							
		      	case DEPOSIT: 			depositAmount(prop.getProperty(key));
		      							break;
		      							
		      	case WITHDRAW: 			withDrawAmount(prop.getProperty(key));
		      							break;
		      	
		      	default:
		      							break;
				
		      }
		}
		
	} catch (FileNotFoundException message) {
		logger.log(Level.INFO, "File Not Found");
	} catch (IOException e1) {
		e1.printStackTrace();
	} 
	finally {
		fis.close();
		
	}
	
	}

}
