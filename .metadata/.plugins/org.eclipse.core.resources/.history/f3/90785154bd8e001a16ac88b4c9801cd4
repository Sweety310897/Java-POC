package com.shivani.bank.services;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.shivani.bank.exceptions.AccountDetailsException;
import com.shivani.bank.exceptions.BalanceException;
import com.shivani.bank.interfaces.InputReader;
import com.shivani.bank.models.Bank;
import com.shivani.bank.validations.InputValidations;

public class PropertyFileReader implements InputReader{
	
	private final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
	Bank shivaniBank = new Bank();
	static int accountNumber = 1000;
	InputValidations validate = new InputValidations();
	BankOperations bankop = new BankOperations();
	
	public void addAccount(String values) {
		try {
			values =  values.replace("\"", "");	
			String[] accDetails = values.split(",");   
			for(String each: accDetails) {
				String[] custDetails = each.split(" ");
				int accNumber = Integer.parseInt(custDetails[0]);
				String custName = custDetails[1];
	            validate.checkName(custName);
				int bankAccType = Integer.parseInt(custDetails[2]);
				validate.checkAccType(bankAccType);
				String aadarNumber = custDetails[3];
				String custMobileNo = custDetails[4];
				validate.checkPhoneNum(custMobileNo);
				String custEmail = custDetails[5];
				validate.checkEmail(custEmail);
				bankop.add(accNumber, custName, bankAccType, custMobileNo, custEmail, aadarNumber);

			}
		}
		catch (AccountDetailsException message) {
			logger.log(Level.INFO, message.getMessage()); 
        }		
	}

	public void displayAll() {
		bankop.display();
		
	}
	public void searchByAccount(String searchAccount) {
		searchAccount =  searchAccount.replace("\"", "");	
		String[] search = searchAccount.split(",");
		for(String each: search) {
			int searchAccountNumber = Integer.parseInt(each);
			bankop.search(searchAccountNumber);
		}
	}
	
	public void depositAmount(String details) {
		 try {
			  details =  details.replace("\"", "");
				String[] depositDetails = details.split(",");
				for(String each: depositDetails) {
					String[] values = each.split(" ");
					int depositAccountNumber = Integer.parseInt(values[0]);
					long amount = Long.parseLong(values[1]);

					bankop.deposit(depositAccountNumber,amount);

				}

		 }catch(AccountDetailsException | BalanceException message ) {
				logger.log(Level.INFO, message.getMessage());
		 }
	}
	public void withDrawAmount(String details) {
		try {				
			  details =  details.replace("\"", "");
				String[] withdrawDetails = details.split(",");
				for(String each: withdrawDetails) {
					String[] values = each.split(" ");
					int withdrawAccountNumber = Integer.parseInt(values[0]);
					long amount = Long.parseLong(values[1]);
					bankop.withDraw(withdrawAccountNumber,amount);
					
				}
		}
		catch(AccountDetailsException | BalanceException message ) {
			logger.log(Level.INFO, message.getMessage());
		}
	}

	
	@SuppressWarnings("rawtypes")
	public void readInput() {
		
		  try { 
			  	FileInputStream fis = new FileInputStream("resources/input.properties");
				Properties prop = new Properties();
					prop.load(fis);
					Enumeration e = prop.propertyNames();
					while (e.hasMoreElements()) {
					      String key = (String) e.nextElement();
					      switch(key) {
					      	case ADDACCOUNT : addAccount(prop.getProperty(key));
					      		break;
					      	case DISPLAYALL: displayAll();
					      		break;
					      	case SEARCHBYACCOUNT : searchByAccount(prop.getProperty(key));
					      		break;
					      	case DEPOSIT: depositAmount(prop.getProperty("deposit"));
					      		break;
					      	case WITHDRAW: withDrawAmount(prop.getProperty("withdraw"));
					      		break;
					      	case EXIT:
			                	log.log(Level.INFO, "Application has ended successfully");
							
					      	default:
								break;
							
					      }
					 } 
		  } 
		  catch (FileNotFoundException message) {
				logger.log(Level.INFO, "File Not Found");
		  } catch (IOException e1) {
			e1.printStackTrace();
		}
		  
	}

}
