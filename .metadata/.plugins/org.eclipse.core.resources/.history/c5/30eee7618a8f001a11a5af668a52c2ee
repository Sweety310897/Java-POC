package com.shivani.bank.services;

import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import com.shivani.bank.exceptions.AccountDetailsException;
import com.shivani.bank.exceptions.BalanceException;
import com.shivani.bank.interfaces.InputReader;
import com.shivani.bank.models.Bank;
import com.shivani.bank.services.BankOperations.Choices;
import com.shivani.bank.validations.InputValidations;

public class ConsoleReader implements InputReader{
	InputValidations validate;
	Bank shivaniBank;
	BankOperations bankop;
	
	public ConsoleReader() {
		validate = new InputValidations();
		shivaniBank = new Bank();
		bankop = new BankOperations();
	}
	
	LogManager lgmngr = LogManager.getLogManager();
	Logger log = lgmngr.getLogger(Logger.GLOBAL_LOGGER_NAME);
	Scanner scan= new Scanner(System.in);
	static int accountNumber;
	
	static {
		accountNumber = 1000;
	}
	
	/*
	 * to read inputs from the console
	 */
	public void addAccount() {
		
		try {
			log.log(Level.INFO, "Please enter name");
            String custName = scan.next();
            validate.checkName(custName);
    		log.log(Level.INFO, "Select Account Type: \n 1 for Savings \n 2 for Current \n 3 for FD \n 4 for DEMAT");
			int bankAccType = Integer.parseInt(scan.next());
			validate.checkAccType(bankAccType);
			log.log(Level.INFO, "Please Enter your Aadar Card Number");
			String aadarNumber = scan.next();
			log.log(Level.INFO, "Please Enter Phone Number: ");
			String custMobileNo = scan.next();
			validate.checkPhoneNum(custMobileNo);
			log.log(Level.INFO, "Please Enter Customer Email Id: ");
			String custEmail = scan.next();
			validate.checkEmail(custEmail);
			bankop.add(accountNumber, custName, bankAccType, custMobileNo, custEmail, aadarNumber);
			inc();
			//			accountNumber++;
		}
		
		catch (AccountDetailsException message) {
			log.log(Level.INFO, message.getMessage()); 
        }

	}
	
	public static void inc() {
		accountNumber++;
	}
	
	/*
	 * display all accounts
	 */
	public void displayAll() {
		
		bankop.display();
	
	}
	
	/*
	 * read inputs for searching account
	 */
	public void searchByAccount() {
		
		log.log(Level.INFO, "Please Enter the account number you want to search: ");
		int searchAccountNumber = scan.nextInt();
		bankop.search(searchAccountNumber);

	}
	
	/*
	 * read inputs for deposit 
	 */
	public void depositAmount() {
	
		try {
			log.log(Level.INFO, "Please Enter the account number you want to deposit: ");
			int depositAccountNumber = scan.nextInt();
			long amount;
			log.log(Level.INFO, "Please Enter the amount you want to Deposit : ");
			amount = scan.nextLong();
			bankop.deposit(depositAccountNumber,amount);
			
		}catch(AccountDetailsException | BalanceException message ) {
			log.log(Level.INFO, message.getMessage());
		}
		
	}
	
	
	/*
	 * read inputs to withdraw 
	 */
	public void withDrawAmount() {
		
		try {	
			log.log(Level.INFO, "Please Enter the account number you want to withdraw: ");
			int withdrawAccountNumber = scan.nextInt();
			long amount;
			log.log(Level.INFO, "Please Enter the amount you want to withdraw : ");
			amount = scan.nextLong();
			bankop.withDraw(withdrawAccountNumber,amount);
			
		}catch(AccountDetailsException | BalanceException message ) {
			log.log(Level.INFO, message.getMessage());
		}

	}
	
	/*
	 * overriding read input method
	 * @see com.shivani.bank.interfaces.InputReader#readInput()
	 */
	public void readInput()
	{
		String userInput;
		Choices choice;
		
		do {
			log.log(Level.INFO, "Please give the inputs as:\n"
					+ "ADDACCOUNT to add the account\n" 
					+ "DISPLAYALL to display all accounts\n"
					+ "SEARCHBYACCOUNT to search by account\n"
					+ "DEPOSIT to deposit into account\n"
					+ "WITHDRAW to withdraw from the account\n"
					+ "EXIT to end the application"
					);
            userInput = scan.next();
            choice = Choices.valueOf(userInput);

            switch (choice) {
                case ADDACCOUNT :    	addAccount();
                						break;
             
                case DISPLAYALL :		displayAll();
                						break;

                case SEARCHBYACCOUNT :	searchByAccount();
                						break;
                
                case DEPOSIT :			depositAmount();
                						break;
                
                case WITHDRAW :			withDrawAmount();
                						break;
                
                case EXIT:				log.log(Level.INFO, "Application has ended successfully");
                						break;
                
                default: break;
            }
        } while(choice != Choices.EXIT);
		
		scan.close();
	}

}
